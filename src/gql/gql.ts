/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query getPokemonById($id: Int) {\n      pokemon: pokemon_v2_pokemon(where: {id: {_eq: $id}}) {\n        id\n        name\n        weight\n        height\n        specy: pokemon_v2_pokemonspecy {\n          names: pokemon_v2_pokemonspeciesnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n            name\n          }\n        }\n        images: pokemon_v2_pokemonsprites {\n          sprites(path: \"front_default\")\n        }\n        abilities: pokemon_v2_pokemonabilities {\n          ability: pokemon_v2_ability {\n            id\n            names: pokemon_v2_abilitynames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n            shortEffects: pokemon_v2_abilityeffecttexts(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              shortEffect: short_effect\n            }\n          }\n        }\n        types: pokemon_v2_pokemontypes {\n          type: pokemon_v2_type {\n            id\n            names: pokemon_v2_typenames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n          }\n        }\n        stats: pokemon_v2_pokemonstats {\n          id\n          stat: pokemon_v2_stat {\n            names: pokemon_v2_statnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n          }\n          baseStat: base_stat\n        }\n      }\n    }\n  ": types.GetPokemonByIdDocument,
    "\n      query getPokemonFilters {\n        types: pokemon_v2_type {\n          id\n          names: pokemon_v2_typenames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n            name\n          }\n        }\n        generations: pokemon_v2_generation {\n          id\n          names: pokemon_v2_generationnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n            name\n          }\n        }\n      }\n    ": types.GetPokemonFiltersDocument,
    "\n      query getPokemons(\n        $limit: Int,\n        $offset: Int,\n        $regex: String,\n        $typesFilter: pokemon_v2_pokemontype_bool_exp,\n        $generationsFilter: pokemon_v2_pokemonspecies_bool_exp\n      ) {\n        pokemons: pokemon_v2_pokemon(\n          where: {\n            pokemon_v2_pokemontypes: $typesFilter,\n            name: {_iregex: $regex},\n            pokemon_v2_pokemonspecy: $generationsFilter\n          },\n          limit: $limit,\n          offset: $offset\n        ) {\n          id\n          name\n          types: pokemon_v2_pokemontypes {\n            type: pokemon_v2_type {\n              id\n            }\n          }\n          specy: pokemon_v2_pokemonspecy {\n            names: pokemon_v2_pokemonspeciesnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n            generation_id\n          }\n          images: pokemon_v2_pokemonsprites {\n            sprites(path: \"front_default\")\n          }\n        }\n      }\n    ": types.GetPokemonsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPokemonById($id: Int) {\n      pokemon: pokemon_v2_pokemon(where: {id: {_eq: $id}}) {\n        id\n        name\n        weight\n        height\n        specy: pokemon_v2_pokemonspecy {\n          names: pokemon_v2_pokemonspeciesnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n            name\n          }\n        }\n        images: pokemon_v2_pokemonsprites {\n          sprites(path: \"front_default\")\n        }\n        abilities: pokemon_v2_pokemonabilities {\n          ability: pokemon_v2_ability {\n            id\n            names: pokemon_v2_abilitynames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n            shortEffects: pokemon_v2_abilityeffecttexts(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              shortEffect: short_effect\n            }\n          }\n        }\n        types: pokemon_v2_pokemontypes {\n          type: pokemon_v2_type {\n            id\n            names: pokemon_v2_typenames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n          }\n        }\n        stats: pokemon_v2_pokemonstats {\n          id\n          stat: pokemon_v2_stat {\n            names: pokemon_v2_statnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n          }\n          baseStat: base_stat\n        }\n      }\n    }\n  "): (typeof documents)["\n    query getPokemonById($id: Int) {\n      pokemon: pokemon_v2_pokemon(where: {id: {_eq: $id}}) {\n        id\n        name\n        weight\n        height\n        specy: pokemon_v2_pokemonspecy {\n          names: pokemon_v2_pokemonspeciesnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n            name\n          }\n        }\n        images: pokemon_v2_pokemonsprites {\n          sprites(path: \"front_default\")\n        }\n        abilities: pokemon_v2_pokemonabilities {\n          ability: pokemon_v2_ability {\n            id\n            names: pokemon_v2_abilitynames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n            shortEffects: pokemon_v2_abilityeffecttexts(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              shortEffect: short_effect\n            }\n          }\n        }\n        types: pokemon_v2_pokemontypes {\n          type: pokemon_v2_type {\n            id\n            names: pokemon_v2_typenames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n          }\n        }\n        stats: pokemon_v2_pokemonstats {\n          id\n          stat: pokemon_v2_stat {\n            names: pokemon_v2_statnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n          }\n          baseStat: base_stat\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query getPokemonFilters {\n        types: pokemon_v2_type {\n          id\n          names: pokemon_v2_typenames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n            name\n          }\n        }\n        generations: pokemon_v2_generation {\n          id\n          names: pokemon_v2_generationnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n            name\n          }\n        }\n      }\n    "): (typeof documents)["\n      query getPokemonFilters {\n        types: pokemon_v2_type {\n          id\n          names: pokemon_v2_typenames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n            name\n          }\n        }\n        generations: pokemon_v2_generation {\n          id\n          names: pokemon_v2_generationnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n            name\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query getPokemons(\n        $limit: Int,\n        $offset: Int,\n        $regex: String,\n        $typesFilter: pokemon_v2_pokemontype_bool_exp,\n        $generationsFilter: pokemon_v2_pokemonspecies_bool_exp\n      ) {\n        pokemons: pokemon_v2_pokemon(\n          where: {\n            pokemon_v2_pokemontypes: $typesFilter,\n            name: {_iregex: $regex},\n            pokemon_v2_pokemonspecy: $generationsFilter\n          },\n          limit: $limit,\n          offset: $offset\n        ) {\n          id\n          name\n          types: pokemon_v2_pokemontypes {\n            type: pokemon_v2_type {\n              id\n            }\n          }\n          specy: pokemon_v2_pokemonspecy {\n            names: pokemon_v2_pokemonspeciesnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n            generation_id\n          }\n          images: pokemon_v2_pokemonsprites {\n            sprites(path: \"front_default\")\n          }\n        }\n      }\n    "): (typeof documents)["\n      query getPokemons(\n        $limit: Int,\n        $offset: Int,\n        $regex: String,\n        $typesFilter: pokemon_v2_pokemontype_bool_exp,\n        $generationsFilter: pokemon_v2_pokemonspecies_bool_exp\n      ) {\n        pokemons: pokemon_v2_pokemon(\n          where: {\n            pokemon_v2_pokemontypes: $typesFilter,\n            name: {_iregex: $regex},\n            pokemon_v2_pokemonspecy: $generationsFilter\n          },\n          limit: $limit,\n          offset: $offset\n        ) {\n          id\n          name\n          types: pokemon_v2_pokemontypes {\n            type: pokemon_v2_type {\n              id\n            }\n          }\n          specy: pokemon_v2_pokemonspecy {\n            names: pokemon_v2_pokemonspeciesnames(where: {pokemon_v2_language: {name: {_eq: \"en\"}}}) {\n              name\n            }\n            generation_id\n          }\n          images: pokemon_v2_pokemonsprites {\n            sprites(path: \"front_default\")\n          }\n        }\n      }\n    "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;